package de.lehmann.lehmannorm.logic;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import de.lehmann.lehmannorm.AConnectionUnitTest;
import de.lehmann.lehmannorm.entity.AbstractEntity;
import de.lehmann.lehmannorm.entity.structure.EntityColumnInfo;
import de.lehmann.lehmannorm.entity.structure.EntityColumnInfo.ForeignKeyHolder;
import de.lehmann.lehmannorm.stubs.ConnectionStub;
import de.lehmann.lehmannorm.stubs.PreparedStatementStub;

public class DaoUnitTest extends AConnectionUnitTest {

    private Dao<AbstractEntity<Integer>, Integer> unitToTest;

    // TEST STATIC METHODS

    @Test
    public void getOrCreateCachedDao() throws InstantiationException, IllegalAccessException, SQLException {

        Connection connection;

        connection = new ConnectionStub();
        final TestEntityA testEntityA = new TestEntityA();

        Assertions.assertEquals(
                Dao.getOrCreateCachedDao(connection, testEntityA.getClass()),
                Dao.getOrCreateCachedDao(connection, testEntityA.getClass()));

        connection = new ConnectionStub();
        final TestEntityB testEntityB = new TestEntityB();

        Assertions.assertEquals(
                Dao.getOrCreateCachedDao(connection, testEntityB.getClass()),
                Dao.getOrCreateCachedDao(connection, testEntityB.getClass()));
    }

    @Test
    public void insert() throws InstantiationException, IllegalAccessException, SQLException {

        final TestEntityC entityC = new TestEntityC();
        entityC.setPrimaryKeyValue(0);

        final TestEntityB entityB = new TestEntityB();
        entityB.setColumnValue(TestEntityB.ID, 0);
        entityB.setColumnValue(TestEntityB.ID_C, entityC);

        final TestEntityA entityA = new TestEntityA();
        entityA.setColumnValue(TestEntityA.ID, 0);
        entityA.setColumnValue(TestEntityA.ID_B, entityB);

        final Dao<TestEntityA, Integer> daoA =
                Dao.getOrCreateCachedDao(connection, TestEntityA.class);

        final boolean success = daoA.insert(entityA);

        assertEquals(true, success);

        final String expected = entityB + "," + entityC + "," + entityA;

        assertEquals(expected, connection.toString());
    }

    @Override
    protected Connection createConnection() throws SQLException {

        return new ConnectionMock();
    }

    // # MOCKS

    // # BEHAVIOR MOCKS

    private static class StatementMock extends PreparedStatementStub {

        private final ArrayList<String> entityInstanceCodes = new ArrayList<>();

        @Override
        public void addBatch(final String sql) throws SQLException {
            entityInstanceCodes.add(sql);
        }

        @Override
        public String toString() {

            final StringBuilder sb = new StringBuilder();

            final Iterator<String> iterator = entityInstanceCodes.iterator();

            if (iterator.hasNext()) {

                sb.append(iterator.next());

                while (iterator.hasNext())
                    sb.append(',' + iterator.next());
            }

            return sb.toString();
        }
    }

    private static class ConnectionMock extends ConnectionStub {

        private static final PreparedStatement STATEMENT = new StatementMock();

        @Override
        public PreparedStatement prepareStatement(final String sql) throws SQLException {

            return STATEMENT;
        }

        @Override
        public PreparedStatement prepareStatement(final String sql, final int autoGeneratedKeys) throws SQLException {

            return STATEMENT;
        }

        @Override
        public String toString() {

            return STATEMENT.toString();
        }
    }

    // ## DATA MOCKS

    private static class TestEntityA extends AbstractEntity<Integer> {

        public final static EntityColumnInfo<Integer>     ID   = new EntityColumnInfo<>("ID", Integer.class);
        public final static EntityColumnInfo<TestEntityB> ID_B =
                new EntityColumnInfo<>("ID_B", TestEntityB.class, ForeignKeyHolder.THIS_ENTITY_TYPE);

        protected TestEntityA() {
            super(ID, ID_B);
        }

        @Override
        public String getTableName() {
            return null;
        }
    }

    private static class TestEntityB extends AbstractEntity<Integer> {

        public final static EntityColumnInfo<Integer>     ID   = new EntityColumnInfo<>("ID", Integer.class);
        public final static EntityColumnInfo<TestEntityC> ID_C =
                new EntityColumnInfo<>("ID_C", TestEntityC.class, ForeignKeyHolder.REFERENCED_ENTITY_TYPE);

        protected TestEntityB() {
            super(ID, ID_C);
        }

        @Override
        public String getTableName() {
            return null;
        }
    }

    private static class TestEntityC extends AbstractEntity<Integer> {

        public final static EntityColumnInfo<Integer> ID = new EntityColumnInfo<>("ID", Integer.class);

        protected TestEntityC() {
            super(ID);
        }

        @Override
        public String getTableName() {
            return null;
        }
    }
}
